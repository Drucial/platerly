// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  first_name  String
  last_name   String
  email       String    @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  destroyed_at DateTime?

  recipes     Recipe[]

  @@map("users")
}

model Image {
  id          Int       @id @default(autoincrement())
  name        String
  url         String
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  destroyed_at DateTime?

  ingredients         Ingredient[]
  recipes_as_image    Recipe[] @relation("RecipeImage")
  recipes_as_source   Recipe[] @relation("RecipeSourceImage")

  @@map("images")
}

model IngredientLocation {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  destroyed_at DateTime?

  ingredients Ingredient[]

  @@map("ingredient_locations")
}

model IngredientType {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  destroyed_at DateTime?

  ingredients Ingredient[]

  @@map("ingredient_types")
}

model Ingredient {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  destroyed_at DateTime?

  image_id    Int?
  image       Image?    @relation(fields: [image_id], references: [id])

  location_id Int?
  location    IngredientLocation? @relation(fields: [location_id], references: [id])

  type_id     Int?
  type        IngredientType? @relation(fields: [type_id], references: [id])

  recipe_ingredients RecipeIngredient[]

  @@map("ingredients")
}

model Recipe {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  prep_time   String?   // Stored as "HH:MM" format
  cook_time   String?   // Stored as "HH:MM" format
  url         String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  destroyed_at DateTime?

  user_id     Int
  user        User      @relation(fields: [user_id], references: [id])

  image_id    Int?
  image       Image?    @relation(fields: [image_id], references: [id], name: "RecipeImage")

  source_image_id Int?
  source_image    Image? @relation(fields: [source_image_id], references: [id], name: "RecipeSourceImage")

  cuisine_type_id Int?
  cuisine_type    CuisineType? @relation(fields: [cuisine_type_id], references: [id])

  steps               Step[]
  recipe_ingredients  RecipeIngredient[]
  recipe_tags         RecipeTag[]

  @@map("recipes")
}

model Step {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  order       Int       // Step order within recipe
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  destroyed_at DateTime?

  recipe_id   Int
  recipe      Recipe    @relation(fields: [recipe_id], references: [id])

  @@map("steps")
}

model CuisineType {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  destroyed_at DateTime?

  recipes     Recipe[]

  @@map("cuisine_types")
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  destroyed_at DateTime?

  recipe_tags RecipeTag[]

  @@map("tags")
}

model RecipeIngredient {
  id          Int       @id @default(autoincrement())
  quantity    Float?    // Amount of ingredient
  unit        String?   // Unit of measurement (cups, tsp, etc.)
  notes       String?   // Additional notes for this ingredient in recipe
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  destroyed_at DateTime?

  recipe_id     Int
  recipe        Recipe     @relation(fields: [recipe_id], references: [id])

  ingredient_id Int
  ingredient    Ingredient @relation(fields: [ingredient_id], references: [id])

  @@unique([recipe_id, ingredient_id]) // Prevent duplicate ingredients per recipe
  @@map("recipe_ingredients")
}

model RecipeTag {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  destroyed_at DateTime?

  recipe_id   Int
  recipe      Recipe    @relation(fields: [recipe_id], references: [id])

  tag_id      Int
  tag         Tag       @relation(fields: [tag_id], references: [id])

  @@unique([recipe_id, tag_id]) // Prevent duplicate tags per recipe
  @@map("recipe_tags")
}
